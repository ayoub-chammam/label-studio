# Generated by Django 3.2.13 on 2022-08-16 00:08

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('tasks', '0025_auto_20220711_1236'),
        ('projects', '0018_alter_project_control_weights'),
    ]

    operations = [
        migrations.CreateModel(
            name='labelling_function',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='name of the Labelling Function', max_length=60, unique=True)),
                ('label', models.CharField(help_text='Label Attributed for the Labelling Function', max_length=60)),
                ('type', models.IntegerField(choices=[(1, 'all matches of one or a list of keywords'), (2, 'all matches of a regex pattern'), (3, 'a script of a python function')], default=None)),
                ('content', models.TextField(default='', help_text='Searched Word or Regular expression to match - in Text corresponding to selected label or LF with Python code', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Time a labelling function was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last time a labelling function was updated', verbose_name='updated at')),
                ('precision', models.FloatField(default=None, help_text='LF Precision score', null=True, verbose_name='precision')),
                ('recall', models.FloatField(default=None, help_text='LF Recall score', null=True, verbose_name='recall')),
                ('f1_score', models.FloatField(default=None, help_text='LF F_score score', null=True, verbose_name='f1_score')),
                ('coverage', models.FloatField(default=None, help_text='LF Coverage score', null=True, verbose_name='coverage')),
                ('overlap', models.FloatField(default=None, help_text='LF Overlap score', null=True, verbose_name='overlap')),
                ('conflict', models.FloatField(default=None, help_text='LF Conflict score', null=True, verbose_name='conflict')),
                ('project', models.ForeignKey(help_text='Project ID where the Labelling Function is created', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='project', to='projects.project')),
            ],
        ),
        migrations.CreateModel(
            name='result',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.TextField(null=True)),
                ('label', models.CharField(help_text='label of the entity', max_length=60, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Time a labelling function annotation is created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last time a labelling function annotation was updated', verbose_name='updated at')),
                ('model_version', models.TextField(null=True, verbose_name='labeling_function')),
                ('final', models.BooleanField(null=True, verbose_name='final model')),
                ('function', models.ForeignKey(help_text='labelling function ID', on_delete=django.db.models.deletion.CASCADE, to='weak_supervision.labelling_function')),
                ('project', models.ForeignKey(help_text='Project ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='projects.project')),
                ('task', models.ForeignKey(help_text='Task ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='tasks.task')),
            ],
        ),
        migrations.CreateModel(
            name='LFmetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(help_text='label', max_length=60, null=True)),
                ('coverage', models.FloatField(blank=True, null=True)),
                ('conflicts', models.FloatField(blank=True, null=True)),
                ('overlaps', models.FloatField(blank=True, null=True)),
                ('precision', models.FloatField(blank=True, null=True)),
                ('recall', models.FloatField(blank=True, null=True)),
                ('f1_score', models.FloatField(blank=True, null=True)),
                ('results', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Time a metric was calculated', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last time a metric was updated', verbose_name='updated at')),
                ('function', models.ForeignKey(help_text='labelling function ID', on_delete=django.db.models.deletion.CASCADE, to='weak_supervision.labelling_function')),
                ('project', models.ForeignKey(help_text='Project ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='projects.project')),
            ],
        ),
        migrations.CreateModel(
            name='datadoc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(default=None, help_text='Corresponding text', null=True)),
                ('spacy_doc', models.JSONField(default=None, help_text='SpaCy doc file relative to each Task in JSON Format', verbose_name='doc')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Time a spacy model was run', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last time a spacy annotation was updated (added spans)', verbose_name='updated at')),
                ('project', models.ForeignKey(help_text='Project ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='projects.project')),
                ('task', models.OneToOneField(help_text='Task ID', on_delete=django.db.models.deletion.CASCADE, to='tasks.task')),
            ],
        ),
        migrations.CreateModel(
            name='aggregation_model',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_name', models.CharField(help_text='name of the aggregation model', max_length=60)),
                ('model_type', models.CharField(choices=[('HMM', 'hidden markov model'), ('Majority Voting', 'Majroity Voting')], max_length=60)),
                ('labels', models.JSONField(default=None, verbose_name='list of labels')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Time an aggreagation model was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last time an aggreagation model was updated', verbose_name='updated at')),
                ('precision', models.FloatField(default=None, help_text='agg model Precision score', null=True, verbose_name='precision')),
                ('recall', models.FloatField(default=None, help_text='agg model Recall score', null=True, verbose_name='recall')),
                ('f1_score', models.FloatField(default=None, help_text='agg model F_score score', null=True, verbose_name='f1_score')),
                ('coverage', models.FloatField(default=None, help_text='agg model Coverage score', null=True, verbose_name='coverage')),
                ('overlaps', models.FloatField(default=None, help_text='agg model Overlap score', null=True, verbose_name='overlap')),
                ('conflicts', models.FloatField(default=None, help_text='agg model Conflict score', null=True, verbose_name='conflict')),
                ('disabled_functions', models.ManyToManyField(blank=True, help_text='selected labelling functions to ignore for the agg. model', related_name='LFs', to='weak_supervision.labelling_function')),
                ('project', models.ForeignKey(help_text='Project ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='projects.project')),
            ],
        ),
        migrations.CreateModel(
            name='aggregate_result',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.TextField(help_text='annotation results', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Time an aggreagtion model annotation was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last time an aggregation model annotation was updated', verbose_name='updated at')),
                ('model_version', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='weak_supervision.aggregation_model')),
                ('project', models.ForeignKey(help_text='Project ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='projects.project')),
                ('task', models.ForeignKey(help_text='Task ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='tasks.task')),
            ],
        ),
    ]
